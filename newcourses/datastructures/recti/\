/*Brandon Snow*/
/*This program will take a array of numbers that is randomly generated and sorts them and merges them in to a array C.*/
#include <stdio.h>
#include <stdlib.h>


void set_array_rand(int x[], int);
void SELECTION_SORT(int x[], int);
void MERGE(int [], int , int [], int , int [], int )

main()
{
     /* 1.   Declare three integer arrays as follows */
     int   a[50], b[70], c[120];
     /* 2. implement a function set_array_rand(int x[], int n)
     and call it to generate the values in array a and b
     randomly. */
     set_array_rand(a, 50);
     set_array_rand(b, 70);
     /* 3. using the SELECTION_SORT(double x[], int n) function
     (see ch02.ppt), sort the elements in a and b arrays. */
     SELECTION_SORT(a, 50);
     SELECTION_SORT(b, 70);
     /* 4. implement a MERGE function and call it as follows to
     merge the values in arrays a and b into array c such that
     the values in c will be sorted after merging */
     MERGE(a, 50, b, 70, c, 120);
     /* 5. print the values in array c */
     PRINT_ARRAY("Array c", c, 120);
}




void set_array_rand(int x[], int n)
{
/* 1. randomly generate elements of x array, e.g, */
for(int i=0; i< n; i++)
     x[i] = rand_int(30, 100);
}
int rand_int(int a,int b)
{
   return rand()%(b-a+1) + a;
}


/* YOUR CODE */
void SELECTION_SORT(int x[], int n)
{
int k,j,m;
double temp;

for(k=o; k<=n-2; k++)
{
m=k;
for(j=m+1; j<=n-1; j++)
{
if(x[j] < x[m])
{
m=j;
temp=x[k];
x[k] = x[m];
x[m]=temp;
} 
}
}
}



void MERGE(int a[], int na, int b[], int nb, int c[], int nc)
{
/* merge the values in a and b into c while keeping the values
sorted. For example, suppose we have the following two
Arrays a = { 3, 7, 9, 12} and b = {4, 5, 10}
When we merge these two arrays, we will get
c = {3, 4, 5, 7, 9, 10, 12}
*/

int ac, bc ,cc;
 ac=bc=cc=0;


}
void PRINT_ARRAY(char *name, int x[], int nx)
{ 
int i;
printf("%f", *name);
for(i=0; i<=nx; i++)
{
printf("\n%s", x[i])
}
}
